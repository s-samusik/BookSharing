<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BookSharing.API</name>
    </assembly>
    <members>
        <member name="M:BookSharing.API.Controllers.AuthController.LoginAsync(BookSharing.Auth.Data.SignInDto)">
            <summary>
            Accept login and password and return a token if the user is found. The login can be mail or phone number.
            </summary>
            <param name="signInDto"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.AuthController.RegisterAsync(BookSharing.Auth.Data.SignUpDto)">
            <summary>
            Create a new client and return a token for this user.
            </summary>
            <param name="signUpDto"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.BooksController.CreateBookAsync(BookSharing.Data.CreateBookDto)">
            <summary>
            Add new book to database.
            </summary>
            <param name="bookDto"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.BooksController.PutBookAsync(System.Int32,BookSharing.Data.UpdateBookDto)">
            <summary>
            Change existing book from database.
            </summary>
            <param name="id"></param>
            <param name="bookDto"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.BooksController.DeleteBookAsync(System.Int32)">
            <summary>
            Remove existing book from database.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.BooksController.GetBookByIdAsync(System.Int32)">
            <summary>
            Return book from database with the specified id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.BooksController.GetAllBooksByRequestAsync(System.String)">
            <summary>
            Return all books that match the request.
            </summary>
            <param name="request">title of book or author or publisher.</param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.BooksController.GetAllBookGenresAsync">
            <summary>
            Return all book genres from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.BooksController.GetAllBooksByGenreAsync(System.String)">
            <summary>
            Return all books of concrete book genre.
            </summary>
            <param name="bookGenre"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.BooksController.CountBooksAsync">
            <summary>
            Count books from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.BooksController.GetPopularBooksAsync(System.Int32)">
            <summary>
            Return popular books from database.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.RentLocationsController.CreateRentLocationAsync(BookSharing.Data.CreateRentLocationDto)">
            <summary>
            Add new location to database.
            </summary>
            <param name="locationDto"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.RentLocationsController.PutRentLocationAsync(System.Int32,BookSharing.Data.UpdateRentLocationDto)">
            <summary>
            Change existing location from database.
            </summary>
            <param name="id"></param>
            <param name="locationDto"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.RentLocationsController.DeleteRentLocationAsync(System.Int32)">
            <summary>
            Removes existing location from database.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.RentLocationsController.GetAllRentLocationsAsync">
            <summary>
            Return all rent locations from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.RentLocationsController.GetRentLocationByIdAsync(System.Int32)">
            <summary>
            Return rent location from database with the specified id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.RentLocationsController.CountRentLocationsAsync">
            <summary>
            Count locations from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.UsersController.CreateUserAsync(BookSharing.Data.CreateUserDto)">
            <summary>
            Add new user to database.
            </summary>
            <param name="userDto"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.UsersController.PutUserAsync(System.Int32,BookSharing.Data.UpdateUserDto)">
            <summary>
            Change existing user from database.
            </summary>
            <param name="id"></param>
            <param name="userDto"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.UsersController.DeleteUserAsync(System.Int32)">
            <summary>
            Remove existing user from database.
            </summary>
            <param name="id">existing user</param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.UsersController.GetUserByIdAsync(System.Int32)">
            <summary>
            Return user from database with the specified id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.UsersController.GetAllUsersByRequestAsync(System.String)">
            <summary>
            Return all users that match the request.
            </summary>
            <param name="request">nickname or email or phone number</param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.UsersController.GetAllUsersByTypeAsync(System.String)">
            <summary>
            Return all users of concrete type.
            </summary>
            <param name="userType"></param>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.UsersController.GetAllUserTypesAsync">
            <summary>
            Return all user tytpes from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BookSharing.API.Controllers.UsersController.CountUsersAsync">
            <summary>
            Count users from database.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
